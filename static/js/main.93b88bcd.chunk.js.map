{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","height","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","editors","flex","flexDirection","breakpoints","between","App","classes","useTheme","React","useState","open","setOpen","onChange","newValue","console","log","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Menu","Typography","variant","noWrap","Drawer","anchor","paper","direction","ChevronLeft","ChevronRight","Divider","List","style","minHeight","paddingLeft","mode","name","editorProps","$blockScrolling","readOnly","Button","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oYAgBMA,G,YAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAAS,OACTC,OAAQ,SAEZC,OAAQ,CACJC,WAAYN,EAAMO,YAAYC,OAAO,CAAC,SAAU,SAAU,CACtDC,OAAQT,EAAMO,YAAYE,OAAOC,MACjCC,SAAUX,EAAMO,YAAYI,SAASC,iBAG7CC,YAAa,CACTC,MAAM,eAAD,OAfG,IAeH,OACLC,WAhBQ,IAiBRT,WAAYN,EAAMO,YAAYC,OAAO,CAAC,SAAU,SAAU,CACtDC,OAAQT,EAAMO,YAAYE,OAAOO,QACjCL,SAAUX,EAAMO,YAAYI,SAASM,kBAG7CC,WAAY,CACRC,YAAanB,EAAMoB,QAAQ,IAE/BC,KAAM,CACFlB,QAAS,QAEbmB,OAAQ,CACJR,MA7BQ,IA8BRS,WAAY,GAEhBC,YAAa,CACTV,MAjCQ,KAmCZW,aAAa,yBACTtB,QAAS,OACTuB,WAAY,SACZC,QAAS3B,EAAMoB,QAAQ,EAAG,IACvBpB,EAAM4B,OAAOC,SAJR,IAKRC,eAAgB,kBAEpBC,QAAS,CACLC,SAAU,EACV1B,WAAYN,EAAMO,YAAYC,OAAO,SAAU,CAC3CC,OAAQT,EAAMO,YAAYE,OAAOC,MACjCC,SAAUX,EAAMO,YAAYI,SAASC,gBAEzCG,YAhDQ,KAkDZkB,aAAc,CACV3B,WAAYN,EAAMO,YAAYC,OAAO,SAAU,CAC3CC,OAAQT,EAAMO,YAAYE,OAAOO,QACjCL,SAAUX,EAAMO,YAAYI,SAASM,iBAEzCF,WAAY,GAEhBmB,QAAQ,aACJpB,MAAO,OACPV,OAAO,sBACPD,QAAS,OACTgC,KAAM,WACNC,cAAe,MACfN,eAAgB,gBACf9B,EAAMqC,YAAYC,QAAQ,KAAM,MAAQ,CACrCF,cAAe,iBAiIhBG,EA3HO,WAClB,IAAMC,EAAU1C,IACVE,EAAQyC,cAFU,EAGAC,IAAMC,UAAS,GAHf,mBAGjBC,EAHiB,KAGXC,EAHW,KAalBC,EAAuC,SAACC,GAC1CC,QAAQC,IAAI,SAAUF,IAG1B,OACI,yBAAKG,UAAWV,EAAQtC,MACpB,kBAACiD,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACIC,SAAS,QACTH,UAAWI,YAAKd,EAAQnC,OAAT,eACVmC,EAAQ3B,YAAc+B,KAG3B,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,cACXC,QAzBiB,WACjCd,GAAQ,IAyBQe,KAAK,QACLV,UAAWI,YAAKd,EAAQtB,WAAY0B,GAAQJ,EAAQnB,OAEpD,kBAACwC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,iBAKR,kBAACC,EAAA,EAAD,CACIf,UAAWV,EAAQlB,OACnByC,QAAQ,aACRG,OAAO,OACPtB,KAAMA,EACNJ,QAAS,CACL2B,MAAO3B,EAAQhB,cAGnB,yBAAK0B,UAAWV,EAAQf,cACpB,kBAACqC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,YAGA,kBAACR,EAAA,EAAD,CAAYG,QA7CU,WAClCd,GAAQ,KA6C6B,QAApB7C,EAAMoE,UAAsB,kBAACC,EAAA,EAAD,MAAsB,kBAACC,EAAA,EAAD,QAG3D,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,MACA,kBAACD,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,OAEJ,0BACItB,UAAWI,YAAKd,EAAQT,QAAT,eACVS,EAAQP,aAAeW,IAE5B6B,MAAO,CAAEtE,QAAS,OAAQiC,cAAe,SAAUsC,UAAW,SAE9D,yBAAKxB,UAAWV,EAAQf,eACxB,yBAAKyB,UAAWV,EAAQN,SACpB,yBACIuC,MAAO,CACH3D,MAAO,OACPV,OAAQ,OACRD,QAAS,OACTiC,cAAe,SACfN,eAAgB,iBAGpB,kBAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,EAACS,MAAO,CAAE3D,MAAO,MAAO6D,YAAa,SAApE,YAGA,kBAAC,IAAD,CACIC,KAAK,OACL5E,MAAM,SACN8C,SAAUA,EACV+B,KAAK,mBACLC,YAAa,CAAEC,iBAAiB,GAChCN,MAAO,CAAE3D,MAAO,OAAQV,OAAQ,UAGxC,yBACIqE,MAAO,CACH3D,MAAO,OACPV,OAAQ,OACRD,QAAS,OACTiC,cAAe,SACfN,eAAgB,iBAGpB,kBAACgC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,EAACS,MAAO,CAAE3D,MAAO,MAAO6D,YAAa,SAApE,SAGA,kBAAC,IAAD,CACIC,KAAK,OACL5E,MAAM,SACN8C,SAAUA,EACV+B,KAAK,mBACLC,YAAa,CAAEC,iBAAiB,GAChCN,MAAO,CAAE3D,MAAO,OAAQV,OAAQ,OAChC4E,UAAU,MAItB,kBAACC,EAAA,EAAD,CAAQlB,QAAQ,YAAYN,MAAM,UAAUgB,MAAO,CAAES,OAAQ,OAAQpE,MAAO,QAA5E,cC5LIqE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.93b88bcd.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport { Toolbar, IconButton, Typography, AppBar, CssBaseline, Drawer, Divider, List, Button } from '@material-ui/core';\nimport {\n    Menu as MenuIcon,\n    ChevronLeft as ChevronLeftIcon,\n    ChevronRight as ChevronRightIcon,\n} from '@material-ui/icons/';\nimport AceEditor from 'react-ace';\n\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-github';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            height: '100vh',\n        },\n        appBar: {\n            transition: theme.transitions.create(['margin', 'width'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        appBarShift: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            marginLeft: drawerWidth,\n            transition: theme.transitions.create(['margin', 'width'], {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        hide: {\n            display: 'none',\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        drawerHeader: {\n            display: 'flex',\n            alignItems: 'center',\n            padding: theme.spacing(0, 1),\n            ...theme.mixins.toolbar,\n            justifyContent: 'space-between',\n        },\n        content: {\n            flexGrow: 1,\n            transition: theme.transitions.create('margin', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n            marginLeft: -drawerWidth,\n        },\n        contentShift: {\n            transition: theme.transitions.create('margin', {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            marginLeft: 0,\n        },\n        editors: {\n            width: '100%',\n            height: `calc(100vh - 160px)`,\n            display: 'flex',\n            flex: '0 0 auto',\n            flexDirection: 'row',\n            justifyContent: 'space-evenly',\n            [theme.breakpoints.between('xs', 'md')]: {\n                flexDirection: 'column',\n            },\n        },\n    }),\n);\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(true);\n\n    const handleDrawerOpen: () => void = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose: () => void = () => {\n        setOpen(false);\n    };\n\n    const onChange: (newValue: string) => void = (newValue: string) => {\n        console.log('change', newValue);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, open && classes.hide)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h5\" noWrap>\n                        Form Editor\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={open}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <Typography variant=\"h5\" noWrap>\n                        Commands\n                    </Typography>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List></List>\n                <Divider />\n                <List></List>\n            </Drawer>\n            <main\n                className={clsx(classes.content, {\n                    [classes.contentShift]: open,\n                })}\n                style={{ display: 'flex', flexDirection: 'column', minHeight: '100%' }}\n            >\n                <div className={classes.drawerHeader} />\n                <div className={classes.editors}>\n                    <div\n                        style={{\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'space-evenly',\n                        }}\n                    >\n                        <Typography variant=\"h6\" noWrap style={{ width: '50%', paddingLeft: '40px' }}>\n                            Command:\n                        </Typography>\n                        <AceEditor\n                            mode=\"json\"\n                            theme=\"github\"\n                            onChange={onChange}\n                            name=\"UNIQUE_ID_OF_DIV\"\n                            editorProps={{ $blockScrolling: true }}\n                            style={{ width: '100%', height: '90%' }}\n                        />\n                    </div>\n                    <div\n                        style={{\n                            width: '100%',\n                            height: '100%',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'space-evenly',\n                        }}\n                    >\n                        <Typography variant=\"h6\" noWrap style={{ width: '50%', paddingLeft: '40px' }}>\n                            Form:\n                        </Typography>\n                        <AceEditor\n                            mode=\"json\"\n                            theme=\"github\"\n                            onChange={onChange}\n                            name=\"UNIQUE_ID_OF_DIV\"\n                            editorProps={{ $blockScrolling: true }}\n                            style={{ width: '100%', height: '90%' }}\n                            readOnly={true}\n                        />\n                    </div>\n                </div>\n                <Button variant=\"contained\" color=\"primary\" style={{ margin: 'auto', width: '55%' }}>\n                    Execute\n                </Button>\n            </main>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}